{"version":3,"sources":["serviceWorker.js","pages/home/components/home-layout.js","pages/home/components/logo.js","pages/home/containers/login/components/login-layout.js","pages/home/containers/login/components/Header-login.js","pages/home/containers/login/components/input.js","components/button.js","pages/home/containers/login/containers/login.js","pages/home/components/Footer.js","pages/home/containers/home.js","index.js"],"names":["Boolean","window","location","hostname","match","HomeLayout","props","react_default","a","createElement","className","children","Logo","LoginLayout","HeaderLogin","Input","placeholder","Button","contenido","Login","login_layout","Header_login","input","components_button","Component","Footer","Home","components_home_layout","components_logo","containers_login","components_Footer","ReactDOM","render","home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCPSC,SARI,SAACC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVJ,EAAMK,YCKJC,SARF,SAACN,GACV,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,UCKOG,SARK,SAACP,GACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVJ,EAAMK,YCKJG,EARK,SAACR,GACjB,OACIC,EAAAC,EAAAC,cAAA,2BCQOM,SATD,SAACT,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,SAAOO,YAAaV,EAAMU,iBCIvBC,EARA,SAACX,GACZ,OACIC,EAAAC,EAAAC,cAAA,cACKH,EAAMY,YCqBJC,mLAjBP,OACIZ,EAAAC,EAAAC,cAACW,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACa,EAAD,CACIN,YAAY,aAChBT,EAAAC,EAAAC,cAACa,EAAD,CACIN,YAAY,aAChBT,EAAAC,EAAAC,cAACc,EAAD,CACIL,UAAU,sBAXdM,aCMLC,SAVA,SAACnB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,4CCYGiB,mLAVP,OACInB,EAAAC,EAAAC,cAACkB,EAAD,KACIpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,cANGN,aCCnBO,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAWC,SAASC,eAAe,QV0H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eac44e04.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport './home-layout.css'\r\n\r\nconst HomeLayout = (props) =>{\r\n    return(\r\n        <div className='Home'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeLayout","import React from 'react'\r\nimport './logo.css'\r\n\r\nconst Logo = (props) => {\r\n    return(\r\n        <h1 className='logo'>\r\n            LOGO\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Logo","import React from 'react'\r\nimport './login.css'\r\nconst LoginLayout = (props) => {\r\n    return(\r\n        <div className='login'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginLayout","import React from 'react'\r\n\r\nconst HeaderLogin = (props) => {\r\n    return(\r\n        <h2>\r\n            MEMBER LOGIN\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default HeaderLogin","import React from 'react'\r\nimport IconsApi from '../../../../../icons/api-icons.json'\r\n\r\nconst Input = (props) => {\r\n    return(\r\n        <div className='input'>\r\n            <input placeholder={props.placeholder}>\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\n\r\nconst Button = (props) => {\r\n    return(\r\n        <button>\r\n            {props.contenido}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react'\r\nimport LoginLayout from '../components/login-layout'\r\nimport HeaderLogin from '../components/Header-login'\r\nimport Input from '../components/input'\r\nimport Button from '../../../../../components/button'\r\n\r\n\r\nclass Login extends Component{\r\n    render(){\r\n        return(\r\n            <LoginLayout>\r\n                <HeaderLogin />\r\n                <form>\r\n                    <Input  \r\n                        placeholder='username' />\r\n                    <Input\r\n                        placeholder='password' />\r\n                    <Button \r\n                        contenido='Ingresar'\r\n                    />\r\n                </form>\r\n            </LoginLayout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport './footer.css'\r\n\r\nconst Footer = (props) => {\r\n    return(\r\n        <div className='footer'>\r\n            <h2>\r\n                INGRESAR COMO ADMINISTRADOR\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react'\r\nimport HomeLayout from '../components/home-layout'\r\nimport Logo from '../components/logo'\r\nimport Login from './login/containers/login'\r\nimport Footer from '../components/Footer'\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <HomeLayout>\r\n                <Logo />\r\n                <Login />\r\n                <Footer />\r\n            </HomeLayout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Home from './pages/home/containers/home'\n\nReactDOM.render(<Home /> , document.getElementById('app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}